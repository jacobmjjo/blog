<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on josephmjjo</title>
    <link>https://josephmjjo.github.io/blog/</link>
    <description>Recent content in Blogs on josephmjjo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© {year}</copyright>
    <lastBuildDate>Thu, 27 Feb 2020 21:58:19 +0900</lastBuildDate><atom:link href="https://josephmjjo.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>아키텍처 타입</title>
      <link>https://josephmjjo.github.io/blog/type_architecture/</link>
      <pubDate>Thu, 27 Feb 2020 21:58:19 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/type_architecture/</guid>
      <description>아키텍처에는 여러가지 유형이 있다.
크게 2가지가 있는데
 집약형 분할형  으로 이 글에서는 분할형을 또
 수직 분할형 수평 분할형 지리 분할형  그리고 마지막으로 요새 대세라고 불리우는 클라우드 가 있다.
그럼 간략하게 각 아키텍처들을 설명해 보겠다.
1.집약형 말 그대로 한 곳에 서버들을 모아서 관리하는 시스템이다.
기업의 주요 업무를 처리하고 그렇기에 고장이 등으로 멈추지 않도록 고민을 많이 해야한다.
한 곳의 집약 되어있기 때문에 관리하기가 쉽다.
하지만 큰 단점은 비용이 많이 득고 확장성 또한 많은 제약이 있다.</description>
    </item>
    
    <item>
      <title>컴퓨터 기본 부품</title>
      <link>https://josephmjjo.github.io/blog/component_of_computer/</link>
      <pubDate>Tue, 25 Feb 2020 22:58:28 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/component_of_computer/</guid>
      <description>CPU CPU는 컴퓨터의 뇌로 컴퓨터에서 가장 중요한 부품이라고 생각하면 된다. 대부분의 연산을 필요로 하는 작업은 CPU가 한다고 생각하면 된다.
RAM RAM은 임시적인 메모리 저장소로 액세스가 굉장히 빠르다 cpu는 저장소가 아니기에 연산에 필요한 데이터를 저장하면서 연산하기는 힘들다 그래서 연산에 필요한 데이터를 저장하는 용도로 사용하는 부품이 RAM이다. 단점은 전기가 흐르지 않으면 데이터가 바로 사라지는 단점이 있다.
하드디스크 하드디스크는 오랫동안 데이터를 저장하고 싶을때 쓰는 저장소로 전기가 흐르지 않아도 데이터가 저장이 되어있다.
대역 대역이란 데이터 전송능력을 의미한다.</description>
    </item>
    
    <item>
      <title>클라우드로 인프라 구성할때.... 개념</title>
      <link>https://josephmjjo.github.io/blog/cloud_infra_architech/</link>
      <pubDate>Thu, 09 Jan 2020 21:18:07 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/cloud_infra_architech/</guid>
      <description>시스템 구성 예
 소규모 웹 서비스 로드 밸런서 웹 서버 x 2 DB 서버 x 1~ 2  보통 부하를 줄이려고 밸런싱을 함
하지만 이번 경우는 부하를 경감하는 것보다 가용성 때문임
DB는 중지되지 않는 구성을 만들기가 쉽지 않음 레코드가 계속 갱신 되기 때문임
또한 DB로 세션 정보를 관리하는 경우, 세션 정보를 유지한 채로 Act/Sby를 해야함
예를 들면 쇼핑 사이트에 있는 장바구니를 생각하면 됨
해결 방안은
 DB 서버의 레플리케이션 기술로 확장 DB 이외의 위치에 데이터 레플리케이션하기  레플리케이션이란 데이터 저장과 백업하는 방법과 관련이 있는 데이터를 호스트 컴퓨터에서 다른 컴퓨터로 복사하는 것 (위키백과)   애플리케이션 수정으로 세션 정보 공유하기  장애 지점은 장애가 발생할 수 있는 장소, 장비, 애플리케이션 등을 말합니다.</description>
    </item>
    
    <item>
      <title>데이터베이스 보안 지침</title>
      <link>https://josephmjjo.github.io/blog/security_for_db/</link>
      <pubDate>Tue, 07 Jan 2020 18:06:03 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/security_for_db/</guid>
      <description>데이터 베이스 서버의 보안 대책 DB 서버의 보안 대책은 크게 5가지로 나눠 생각 할 수 있습니다.
 DB에 접속할 수 있는 사람은 누구인지? 웹 서버와 DB서버 사이의 통신을 신뢰할 수 있는가? DB의 결과를 신뢰할 수 있는가? DB 서버에 로그인하는 사람들 신뢰할 수 있는가? DB 서버가 읽고 쓰는 디스크를 신뢰할 수 있는가?  첫번째는 너무도 당연한 이야기라 넘어가겠습니다.
두번째는 로컬 네트워크 안에서는 신뢰할 수 있지만 클라우드 공유 세크먼트 같은 경우에는 주의 해야합니다.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>https://josephmjjo.github.io/blog/security/</link>
      <pubDate>Mon, 06 Jan 2020 00:47:45 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/security/</guid>
      <description>보안 대응 이해하기 네트워크 보안 방법 중에 대표적인 방법을 설명해 보겠습니다.
 방화벽 방화벽을 사용하는 가장 큰 이유는 네트워크 분리와 분할 입니다. 1
비록 데몬을 정지하거나 아파치에서 불필요한 모듈을 읽어 들이지 않게 하는 방법도 있지만 네트워크를 분리하고 분할 하는 방법이 더 안전합니다.   IDS/IPS 2 침입 탐지 시스템(Intrusion Detection System, IDS)은 일반적으로 시스템에 대한 원치 않는 조작을 탐지하여 역할을 합니다.
즉 감시 역할을 한다고 생각하시면 됩니다. IDS에 차단 기능까지 추가하면 IPS라고 생각하시면 됩니다.</description>
    </item>
    
    <item>
      <title>네트워크 지연 종류</title>
      <link>https://josephmjjo.github.io/blog/network_latency/</link>
      <pubDate>Mon, 16 Dec 2019 23:24:02 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/network_latency/</guid>
      <description>지연에는 크게 3가지 종류가 있다.
 노드 처리 지연 큐잉 지연 전파 지연 이다.  노드 처리 지연(nodal processing delay)
 라우터에서의 처리 지연 패킷의 헤더를 조사하고 어느 출력 링크로 보낼지 결정하는 시간에 따른 지연   큐잉 지연(queuing delay)
 패킷이 큐에서 출력링크로 전송되는 과정에서 생기는 딜레이   여기서 큐란 패킷이 라우터에서 빠져나가지 못할 경우 라우터에 패킷을 저장하는 방법을 뿐이다. 큐는 패킷을 저장 하지않고 그저 FIFO(FIFO))로 나열만 한다. 즉 큐에는 패킷이 없고 패킷 주소만 가지고 있다.</description>
    </item>
    
    <item>
      <title>Serverless</title>
      <link>https://josephmjjo.github.io/blog/serverless/</link>
      <pubDate>Sun, 06 Oct 2019 00:27:48 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/serverless/</guid>
      <description>Serverless 서버가 없다는 뜻이 아님
단지 가상머신에 서버 설치후 서버를 관리할 필요가 없다는 뜻임
서버 개수, 네트워크 종류, 서버 사양을 고려할 필요가 없음
 Baas(Backend as as a Service) 서버확장, 보안성 등의 서버개발을 지원해줌.
개발자들이 서버 개발 안해도 되고 서버의 이용자가 순식간에 늘어나도 알아서 확장 가능
대표적으로 AWS Firebase가 있다.
단점
 클라이언트 위주의 코드 비용 복잡한 쿼리 불가능함   FaaS(Function as a Service) FaaS는 프로젝트를 여러개의 함수로 쪼갬, 분산된 컴퓨팅 자원에 함수를 등록하고, 실행되는 횟수만큼 비용을 지불하는 방식</description>
    </item>
    
    <item>
      <title>IT 용어정리</title>
      <link>https://josephmjjo.github.io/blog/it_trend_word/</link>
      <pubDate>Wed, 25 Sep 2019 23:29:08 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/it_trend_word/</guid>
      <description>쿠버네티스 VM 대신 컨테이너를 많이 쓴다고 한다. 그 이유는 VM과 달리 OS가 포함되지 않아 가볍다. 없는 os는 호스트 os를 공유하는 것으로 대체한다.
장점으로는
  8이미지 생성이 빠르고 쉽고 효율적이다. (필자도 까는게 너무 쉬워서 분명 다 깔았는데 안 깐줄 알고 의심 했을 정도다.)
  안정적이고 주기적으로 컨테이너 이미지를 빌드해서 배포 가능하다. 게다가 빠르고 쉽게 롤백할 수 있다.
  클라우드 및 OS 배포판 간 이식성이 높다.
  자원 사용량: 고효율, 고집적</description>
    </item>
    
    <item>
      <title>Cloud 서비스 종류</title>
      <link>https://josephmjjo.github.io/blog/cloud_%EC%A2%85%EB%A5%98/</link>
      <pubDate>Sat, 14 Sep 2019 23:23:18 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/cloud_%EC%A2%85%EB%A5%98/</guid>
      <description>클라우드 컴퓨팅 서비스! 주요 3대 서비스로는
 Software as a Service(SaaS) Platform as a Service(Paas) Infrastructure as a Service(IaaS)   SaaS(Software as a Service) 소프트웨어로서의 서비스 공급업체나 서비스 제공자에의 의해 호스트가 된 응용프로그램을 인터넷을 통해 고객에게 제공되는 소프트웨어 배포 모델이다.
SaaS 는 SOA(Service Oriented Architecture) 나 웹 서비스를 지원하는 기술로 널리 제공되는 모델이 되고 있습니다. 인 이 서비스는 인터넷을 이용하는 전세계의 유저들이 사용할 수 있다.
전통적으로, 소프트웨어 응용프로그램은 선결제를 유도하면서 컴퓨터의 설치의 필요성이 있었다.</description>
    </item>
    
    <item>
      <title>Cloud</title>
      <link>https://josephmjjo.github.io/blog/cloud/</link>
      <pubDate>Fri, 06 Sep 2019 23:13:28 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/cloud/</guid>
      <description>클라우드 컴퓨팅이란? 클라우드 컴퓨팅이란 컴퓨팅 파워(CPU, RAM, Network Speeds, Storage OS 소프트웨어)를 물리적인 설치 보다는 네트워크를 이용해서 고객에게 배달해주는 것이다.(AWS, Azure, Google Cloud가 대표적임)
클라우드 컴퓨팅을 쉽게 설명하자면 당신이 버스나 기차를 통해 여행을 떠날 때, 당신은 도착지에 해당하는 티켓을 구매하고 도착지에 도착 할 때까지 좌석에 앉는다 마찬가지로 다른 승객도 똑같이 표를 구매하고 같은 버스 좌석에 앉는다.
그렇다고 다른 승객이 당신의 여행을 방해 하는 건 아니다. 그리고 당신은 도착지에 도착하면 운전기사에게 감사를 표하고 버스에서 내린다.</description>
    </item>
    
    <item>
      <title>DSLAM</title>
      <link>https://josephmjjo.github.io/blog/dslam/</link>
      <pubDate>Wed, 04 Sep 2019 00:26:19 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/dslam/</guid>
      <description>DSLAM(Digital Subscribe Line Access Mulitplexer)은 DSL모뎀에서 송수신되는 데이터를 모아 백본 네트워크로 전송하는 DSL 접속을 위한 다중화 장비다.
DSL 기준 전송률은 24Mbps 다운 스트림과 2.5 Mbps 업 스트림이다. 다운 스트림과 업 스트림이 다른 이유는 접속이 비대칭이기 때문이다.
대체로 등급 서비스를 제공받을때 DSL 제공자가 의도적으로 거주단위로 제약을 두거나 최대율이 가정과 회사의 거리로 인해 제한 받는다는 경우로 다운스트림과 업스트림 전송률은 위에서 언급한 것 보다는 낮다.
DSL은 기존의 있던 전화 인프라를 사용하지만 케이블 인터넷 접속은 TV 회사의 기존 케이블 TV 인프라를 이용한다.</description>
    </item>
    
    <item>
      <title>ISP와 프로토콜</title>
      <link>https://josephmjjo.github.io/blog/isp/</link>
      <pubDate>Sat, 31 Aug 2019 23:10:00 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/isp/</guid>
      <description>ISP ISP는 쉽게 말해서 인터넷 제공자다.
앤드 시스템은 ISPs(Internet Service Providers)를 통해서 인터넷에 접속한다.
로컬 케이블이나 전화 회사 같은 지역 ISPs나 대학 ISPs, 회사 ISPs, 호텔, 카페 다른 기타 공공장소의 Wifi 등이 이에 해당한다.
각 ISP는 각자가 패킷 스위치와 통신링크로 된 네트워크다.
ISP는 여러가지 네트워크 타입을 앤드 시스템에 제공해준다 모뎀이나 DSL 같은 거주적 브로드밴드도 포함한다.
인터넷은 각 앤드 시스템을 연결한다. 낮은 티어의 ISP들은 국가단위로 연결하고 level3과 같은 높은 티어는 AT&amp;amp;T나 KT 같은 회사로 연결 됩니다.</description>
    </item>
    
    <item>
      <title>Internet</title>
      <link>https://josephmjjo.github.io/blog/internet/</link>
      <pubDate>Fri, 30 Aug 2019 00:56:54 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/internet/</guid>
      <description>인터넷이란? 인터넷이란 수백만대의 컴퓨팅 디바이스들이 전역에 걸쳐 서로 연결되어 있는 컴퓨터 망이다.
전통적으로는 데스크탑, 리눅스 워크 스테이션, 웹페이지나 이메일 메시지와 같은 정보를 전달하 고 저장하는 서버가 있고, 비전통적인 인터넷 앤드 시스템은 랩탑, 스마트폰, 테블릿, TV, 게이밍 콘솔, 웹캠 등이 있다.
모든 인터넷에서는 기기를 호스트 또는 end systems 이라 불리운다.
엔드 시스템들은 커뮤니케이션 링크와 패킷 스위치들의 망에 의해서 같이 연결된다.
커뮤니케이션 링크는 다양한 다른 타입의 물리적인 미디어로 구성되어지는데, 구리 와이어, 동 축케이블, 광섬유, 주파수 등이 있다.</description>
    </item>
    
    <item>
      <title>Thread</title>
      <link>https://josephmjjo.github.io/blog/thread/</link>
      <pubDate>Thu, 29 Aug 2019 00:53:16 +0900</pubDate>
      
      <guid>https://josephmjjo.github.io/blog/thread/</guid>
      <description>쓰레드 란? 쓰레드란 cpu 이용의 기본적인 단위이다. 쓰레드 ID, 프로그램 카운터, 레지스터 셋, 그리고 스택으로 구성된다.
쓰레드가 다른 쓰레드와 같이 속하게 되면 정보를 공유하는데 이때 공유하는 정보는 코드 섹션, 데이터 섹션, 그리고 다른 OS 자원 (오픈 파일, 신호(?)이다).
반면에 기존의 전통 프로세스 (or heavyweight )는 하나의 콘트롤 쓰레드를 소유하는 차이점이 있다. \ 만약 프로세스에 여러 콘트롤 쓰레드를 가지고 있다면 같은 시간에 한 업무를 하는 것보다 더 나은 퍼포먼스를 구사한다.
 Motivation (?</description>
    </item>
    
  </channel>
</rss>
